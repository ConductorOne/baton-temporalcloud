name: ci
on: pull_request
env:
  TEST_NAMESPACE_NAME: "ci-test"

jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.22.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: go test -v -covermode=count -json ./... > test.json
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  setup-temporal-cloud:
    needs:
      - go-test
    runs-on: ubuntu-latest
    env:
      TEMPORAL_CLOUD_API_KEY: ${{ secrets.TEMPORAL_CLOUD_API_KEY }}
    outputs:
      user-id: ${{ steps.user-id.outputs.user }}
    steps:
      - name: Install tcld
        uses: ./.github/actions/install-tcld
      - name: Create test namespace
        run: |
          tcld gen ca --org c1 -d 30d --ca-cert ./ca.crt --ca-key ./ca.pem && tcld namespace create --ca-certificate $(base64 -e ./ca.crt) --namespace ${{ env.TEST_NAMESPACE_NAME }} --region "aws-us-west-2"
      - name: Create test user
        run: |
          tcld user invite --account-role="Read" --user-email "ci-test@${{ secrets.TEST_EMAIL_DOMAIN}}"
      - name: Send user ID to job output
        id: user-id
        run: |
          ID=$(tcld user get --user-email "ci-test@${{ secrets.TEST_EMAIL_DOMAIN}}" | jq --exit-status '.id' | tr -d '"'); echo "user=$ID" >> "$GITHUB_OUTPUT"

  test:
    runs-on: ubuntu-latest
    needs:
      - setup-temporal-cloud
    env:
      BATON_LOG_LEVEL: debug
      BATON_API_KEY: ${{ secrets.TEMPORAL_CLOUD_API_KEY }}
      CONNECTOR_GRANT: 'namespace:ci-test.iv3js:read:user'
      CONNECTOR_ENTITLEMENT: 'namespace:ci-test.iv3js:read'
      CONNECTOR_PRINCIPAL_ID: ${{ needs.setup-temporal-cloud.outputs.user-id }}
      CONNECTOR_PRINCIPAL_TYPE: 'user'
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build baton-temporalcloud
        run: go build ./cmd/baton-temporalcloud
      - name: Run baton-temporalcloud
        run: ./baton-temporalcloud
      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin
      - name: Grant entitlement
        run: ./baton-temporalcloud --grant-entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL_TYPE}}:${{ env.CONNECTOR_PRINCIPAL_ID }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"
      - name: Check grant was granted
        run: |
          baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL_TYPE}}:${{ env.CONNECTOR_PRINCIPAL_ID }}\""
      - name: Revoke grants
        run: ./baton-temporalcloud --revoke-grant="${{ env.CONNECTOR_GRANT }}:${{ env.CONNECTOR_PRINCIPAL_ID }}"
      - name: Check grant was revoked
        run: ./baton-temporalcloud && baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then .grants[]?.principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL_TYPE}}:${{ env.CONNECTOR_PRINCIPAL_ID }}\" else . end"

  teardown-temporal-cloud:
    runs-on: ubuntu-latest
    env:
      TEMPORAL_CLOUD_API_KEY: ${{ secrets.TEMPORAL_CLOUD_API_KEY }}
    needs:
      - test
    if: success() || failure()
    steps:
      - name: Install tcld
        uses: ./.github/actions/install-tcld
      - name: Delete test namespace
        run: |
          tcld namespace delete --namespace ${{ env.TEST_NAMESPACE_NAME }}
      - name: Delete test user
        run: |
          tcld user delete --user-email "ci-test@${{ secrets.TEST_EMAIL_DOMAIN}}"
